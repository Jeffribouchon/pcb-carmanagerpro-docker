import re
import json
from modules.agents.base_agent import BaseAgent
from modules.utils.deepseek_client import query_deepseek
from modules.odoo.client import OdooClient
from modules.odoo.odoo_model import OdooModel

CRITERIA_PROMPT = """
Tu es un agent qui extrait des crit√®res de recherche de contacts d‚Äôun texte utilisateur.
R√©ponds uniquement en JSON avec les cl√©s suivantes :
Volume d‚Äôachat, Fr√©quence d‚Äôachat, Type de v√©hicules, Marques privil√©gi√©es,
√âtat des v√©hicules, Motorisation, Kilom√©trage max, Budget moyen, Achat par lot,
Mode de financement, D√©lais de paiement, Fournisseurs habituels, Attentes principales,
Contraintes, Opportunit√©s, Canal de contact, Relation commerciale, Notes.
"""

FILTER_PROMPT = """
Tu es un agent qui re√ßoit une liste de contacts (JSON) et des crit√®res de recherche (JSON).
Retourne uniquement les contacts qui correspondent le mieux aux crit√®res.
R√©ponds uniquement avec un tableau JSON des contacts retenus (pas de texte explicatif).
"""

class ContactAgent(BaseAgent):

    def __init__(self):
        client = OdooClient()
        self.res_partner = OdooModel(client, 'res.partner')
    
    def extract_criteria(self, query: str) -> dict:
        response = query_deepseek(CRITERIA_PROMPT, query)

        # üîπ Nettoyage de la r√©ponse DeepSeek
        cleaned = response.strip()
        # enlever les balises ```json ... ```
        cleaned = re.sub(r"^```json\s*", "", cleaned)
        cleaned = re.sub(r"```$", "", cleaned)

        try:
            return json.loads(cleaned)
        except Exception as e:
            raise Exception(f"Impossible de parser la r√©ponse DeepSeek nettoy√©e:\n{cleaned}\nErreur: {e}")
    
    def hybrid_search(self, query: str):
        # 1. Extraction des crit√®res
        criteria = self.extract_criteria(query)

        # 2. Pr√©-filtrage c√¥t√© Odoo (domain sur les champs cl√©s)
        domain = []
        
        domain.append('|')
        domain.append(('category_id', '=', False))
        domain.append(('category_id.name', 'not in', ['Test', 'Partenaires']))
        
        if criteria.get("Type de v√©hicules"):
            domain.append(("x_type_vehicule_tag_ids", "ilike", criteria["Type de v√©hicules"]))
        if criteria.get("Motorisation"):
            domain.append(("x_motorisation_tag_ids.x_name", "ilike", criteria["Motorisation"]))
        if criteria.get("Marques privil√©gi√©es"):
            domain.append(("x_marque_vehicule_tag_ids.x_name", "ilike", criteria["Marques privil√©gi√©es"]))

        # r√©cup√©rer un set large mais limit√©
        fields = [
            "name", "email", "phone", "city", "x_statut_client", "x_type_vehicule_tag_ids", "x_marque_vehicule_tag_ids.x_name", "x_modele_vehicule",
            "x_motorisation_tag_ids.x_name", "x_volume_achat", "x_frequence_achat", "x_etat_vehicules",
            "x_kilometrage_maximum", "x_annee_minimum", "x_budget_maximum", "x_achat_bulk", "x_mode_financement", "x_mode_paiement", "x_delai_paiement_id.name",
            "x_fournisseurs_habituels", "x_attentes", "x_contraintes", "x_opportunites",
            "x_canal_contact", "x_relation_commerciale", "x_remarques_specifiques", "comment"
        ]
        pre_filtered = self.res_partner.search_read(domain, fields=fields, limit=200)

        # 3. Raffinage via DeepSeek
        # refined_contacts = pre_filtered
        filtering_input = {
            "criteria": criteria,
            "contacts": pre_filtered
        }
        refined_response = query_deepseek(FILTER_PROMPT, json.dumps(filtering_input, ensure_ascii=False))
        try:
            refined_contacts = json.loads(refined_response)
        except:
            refined_contacts = pre_filtered  # fallback si DeepSeek √©choue

        # ‚úÖ Retourne les crit√®res et contacts
        return (criteria, refined_contacts)
    
    def search(self, query: str):
        return self.hybrid_search(query)
