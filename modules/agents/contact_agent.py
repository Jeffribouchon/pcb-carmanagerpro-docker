import json
from modules.agents.base_agent import BaseAgent
from modules.utils.deepseek_client import query_deepseek
from modules.odoo.client import OdooClient
from modules.odoo.odoo_model import OdooModel

CRITERIA_PROMPT = """
Tu es un agent qui extrait des crit√®res de recherche de contacts d‚Äôun texte utilisateur.
Les cat√©gories attendues sont : Volume d‚Äôachat, Fr√©quence d‚Äôachat, Type de v√©hicules,
Marques privil√©gi√©es, Mod√®les souhait√©s, √âtat des v√©hicules, Motorisation, Kilom√©trage max, Budget moyen,
Achat par lot, Mode de financement, D√©lais de paiement, Fournisseurs habituels,
Attentes principales, Contraintes, Opportunit√©s, Canal de contact, Relation commerciale.
R√©ponds uniquement en JSON.
"""

class ContactAgent(BaseAgent):

    def extract_criteria(self, query: str) -> dict:
        response = query_deepseek(CRITERIA_PROMPT, query)
        try:
            return json.loads(response)
        except:
            raise Exception(f"Impossible de parser la r√©ponse DeepSeek: {response}")

    def prefilter_contacts(self, criteria: dict):
        domain = []
        client = OdooClient()
        res_partner = OdooModel(client, 'res.partner')
        
        # Motorisation
        if criteria.get("Motorisation"):
            domain.append(("x_motorisation_tag_ids", "ilike", criteria["Motorisation"]))
    
        # Kilom√©trage max
        if criteria.get("Kilom√©trage max"):
            domain.append(("x_kilometrage_maximum", "<=", criteria["Kilom√©trage max"]))
    
        # Budget moyen
        if criteria.get("Budget moyen"):
            domain.append(("x_budget_maximum", "<=", criteria["Budget moyen"]))

        # Utilisation de search_read pour r√©cup√©rer directement les donn√©es des contacts
        fields = ["name", "email", "phone", "city"]
        return res_partner.search_read(domain, fields=fields)


    def search(self, query: str):
        # 1. Extraire les crit√®res
        # criteria = self.extract_criteria(query)

        # 2. Pr√©-filtrer c√¥t√© Odoo
        prefiltered = prefilter_contacts(criteria)

        # if not prefiltered:
        #     return criteria, []

        # 3. Raffiner c√¥t√© IA
        # refined = [] #refine_with_ai(query, prefiltered)

        return prefiltered
        # return criteria, refined

    
    

    # # üîπ √âtape 1 : Odoo fait le pr√©-filtrage
    # def prefilter_contacts(self, criteria: dict):
    #     domain = []
    #     client = OdooClient()
    #     res_partner = OdooModel(client, 'res.partner')

    #     # Type de v√©hicules
    #     if criteria.get("Type de v√©hicules"):
    #         domain.append(("x_type_vehicule_tag_ids", "ilike", criteria["Type de v√©hicules"]))

    #     # Marques privil√©gi√©es
    #     if criteria.get("Marques privil√©gi√©es"):
    #         domain.append(("x_marque_vehicule_tag_ids", "ilike", criteria["Marques privil√©gi√©es"]))

    #     # Mod√®les de v√©hicules
    #     if criteria.get("Mod√®les souhait√©s"):
    #         domain.append(("x_modele_vehicule", "ilike", criteria["Marques privil√©gi√©es"]))
            
    #     # Volume d'achat
    #     if criteria.get("Volume d‚Äôachat"):
    #         domain.append(("x_volume_achat", "ilike", criteria["Volume d‚Äôachat"]))
    
    #     # Fr√©quence d‚Äôachat
    #     if criteria.get("Fr√©quence d‚Äôachat"):
    #         domain.append(("x_frequence_achat", "ilike", criteria["Fr√©quence d‚Äôachat"]))
    
    #     # √âtat des v√©hicules
    #     if criteria.get("√âtat des v√©hicules"):
    #         domain.append(("x_etat_vehicules", "ilike", criteria["√âtat des v√©hicules"]))
    
    #     # Motorisation
    #     if criteria.get("Motorisation"):
    #         domain.append(("x_motorisation_tag_ids", "ilike", criteria["Motorisation"]))
    
    #     # Kilom√©trage max
    #     if criteria.get("Kilom√©trage max"):
    #         domain.append(("x_kilometrage_maximum", "<=", criteria["Kilom√©trage max"]))
    
    #     # Budget moyen
    #     if criteria.get("Budget moyen"):
    #         domain.append(("x_budget_maximum", "<=", criteria["Budget moyen"]))
    
    #     # Achat par lot
    #     if criteria.get("Achat par lot"):
    #         domain.append(("x_achat_bulk", "=", criteria["Achat par lot"].lower() == "oui"))
    
    #     # Mode de financement
    #     if criteria.get("Mode de financement"):
    #         domain.append(("x_mode_financement", "ilike", criteria["Mode de financement"]))
    
    #     # D√©lais de paiement
    #     if criteria.get("D√©lais de paiement"):
    #         domain.append(("x_delai_paiement_id", "ilike", criteria["D√©lais de paiement"]))
    
    #     # Fournisseurs habituels
    #     if criteria.get("Fournisseurs habituels"):
    #         domain.append(("x_fournisseurs_habituels", "ilike", criteria["Fournisseurs habituels"]))
    
    #     # Attentes principales
    #     if criteria.get("Attentes principales"):
    #         domain.append(("x_attentes", "ilike", criteria["Attentes principales"]))
    
    #     # Contraintes
    #     if criteria.get("Contraintes"):
    #         domain.append(("x_contraintes", "ilike", criteria["Contraintes"]))
    
    #     # Opportunit√©s
    #     if criteria.get("Opportunit√©s"):
    #         domain.append(("x_opportunites", "ilike", criteria["Opportunit√©s"]))
    
    #     # Canal de contact
    #     if criteria.get("Canal de contact"):
    #         domain.append(("x_canal_contact", "ilike", criteria["Canal de contact"]))
    
    #     # Relation commerciale
    #     if criteria.get("Relation commerciale"):
    #         domain.append(("x_relation_commerciale", "ilike", criteria["Relation commerciale"]))

        
    #     # Utilisation de search_read pour r√©cup√©rer directement les donn√©es des contacts
    #     fields = ["name", "email", "phone", "city"]
    #     return res_partner.search_read(domain, fields=fields)
    
    # def search(self, query: str):
    #     # 1. Extraire les crit√®res
    #     criteria = self.extract_criteria(query)
    #     return criteria
    
    # #üîπ √âtape 2 : DeepSeek raffine
    # def refine_with_ai(query: str, contacts: list) -> list:
    # #     prompt = f"""
    # # Tu es un assistant qui doit filtrer une liste de contacts Odoo selon cette requ√™te utilisateur :
    # # "{query}"
    
    # # Voici les contacts disponibles (JSON) :
    # # {json.dumps(contacts, ensure_ascii=False)}
    
    # # Retourne uniquement les contacts pertinents en JSON (garde tous leurs champs).
    # # Si aucun ne correspond, retourne [].
    # # """
    #     prompt = f"""
    # Tu es un assistant qui doit filtrer une liste de contacts Odoo selon cette requ√™te utilisateur
    # Retourne uniquement les contacts pertinents en JSON (garde tous leurs champs).
    # Si aucun ne correspond, retourne [].
    # """
    #     response = query_deepseek(prompt)
    #     try:
    #         return json.loads(response)
    #     except:
    #         return []

